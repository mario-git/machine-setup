#!/usr/bin/env bash

set -e

### nix

printf "Nix time!\n\n"

# TODO: handle channel update switch, set version (sed? :)) and put it in channels
NIX_CHANNEL_TARGET="nixos-22.11"

if which nix > /dev/null 2>&1; then
    printf "Nix already installed.\n"
else
    printf "Nix will be installed shortly...\n"
    curl -L https://nixos.org/nix/install | sh

    # already in .zshrc, but needed first time
    if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi
    export NIX_PATH="$HOME/.nix-defexpr/channels"

    printf "\nNix installed successfully!\n"

    printf "Now adding %s to your channels...\n" "$NIX_CHANNEL_TARGET"
    nix-channel --add "https://nixos.org/channels/$NIX_CHANNEL_TARGET" nixpkgs
    nix-channel --update
fi

printf "\nNix packages time!\n\n"

function nix_dep {
    DEP_NAME="$1"
    DEP_EXECUTABLE=${2:-$DEP_NAME}
    if which "$DEP_EXECUTABLE" > /dev/null 2>&1; then
        printf "Skipped %s already installed\n" "$DEP_NAME"
    else
        printf "Installing %s shortly...\n" "$DEP_NAME"
	nix-env -iA "nixpkgs.$DEP_NAME"
    fi
}

# basic shell utils
nix_dep bat
nix_dep coreutils sha256sum
nix_dep direnv
nix_dep envsubst
nix_dep gnupg gpg
nix_dep jq
nix_dep ranger
nix_dep ripgrep rg
nix_dep shellcheck
nix_dep tree
nix_dep vim
nix_dep yq

# dev
nix_dep awscli2 aws
nix_dep babashka bb
nix_dep clojure
nix_dep clojure-lsp
nix_dep jet
nix_dep leiningen lein
nix_dep terraform

# ui
nix_dep emacs
# nix_dep firefox
nix_dep keepassxc

# for to_delete in fzf stow thefuck; do
#     printf "Attempting to delete %s\n" "$to_delete"
#     nix-env --uninstall "$to_delete"
# done

### dotfiles

printf "\nDotfiles time!\n\n"

function ensure_link {
    FROM="$(pwd)/dotfiles/$1"
    TO="$HOME/$2"
    TO_DIR="$(dirname "$TO")"
    if [ ! -f "$TO" ]; then
        printf "Linking missing dotfile %s\n" "$TO"
        [ ! -d "$TO_DIR" ] && mkdir -p "$TO_DIR"
        ln -s "$FROM" "$TO"
    else
	printf "Skipped %s which already exists\n" "$TO"
    fi
}

ensure_link "deps.edn" ".clojure/deps.edn"
ensure_link "karabiner.json" ".config/karabiner/karabiner.json" # OK, Mac only, to be handled
ensure_link "lein_profiles.clj" ".lein/profiles.clj"
ensure_link "shadow-cljs.edn" ".shadow-cljs/config.edn"
ensure_link "p10k" ".p10k.zsh"
ensure_link "vimrc" ".vimrc"
ensure_link "xmodmap" ".Xmodmap"
ensure_link "zprofile" ".zprofile"
ensure_link "zshrc" ".zshrc"

printf "\nAll done!\n"
